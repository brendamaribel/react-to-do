{"version":3,"sources":["components/ToDo.js","App.js","serviceWorker.js","index.js"],"names":["ToDo","react_default","a","createElement","className","type","checked","this","props","isCompleted","onChange","toggleComplete","description","onClick","deleteTodo","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","todos","newTodoDescription","e","setState","target","value","preventDefault","newTodo","concat","toConsumableArray","index","slice","todo","filteredArr","filter","i","_this2","map","components_ToDo","key","placeholder","handleChange","handleSubmit","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAwBeA,0LAlBX,OAEEC,EAAAC,EAAAC,cAAA,UAEEF,EAAAC,EAAAC,cAAA,SAAOC,UAAY,aAElBH,EAAAC,EAAAC,cAAA,SAAOE,KAAO,WAAWC,QAAYC,KAAKC,MAAMC,YAAcC,SAAaH,KAAKC,MAAMG,iBACtFV,EAAAC,EAAAC,cAAA,OAAKC,UAAY,cACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aAAjB,IAAgCG,KAAKC,MAAMI,YAA3C,KACAX,EAAAC,EAAAC,cAAA,OAAKC,UAAY,iBAAiBS,QAAYN,KAAKC,MAAMM,sBAb/CC,cC2FJC,cAvFb,SAAAA,EAAYR,GAAM,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAX,KAAAS,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAX,KAAAW,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAf,KAAMC,KAEDe,MAAQ,CACXC,MAAO,CACL,CAACZ,YAAa,eAAgBH,aAAa,GAC3C,CAACG,YAAa,wBAAyBH,aAAa,GACpD,CAACG,YAAa,iBAAkBH,aAAa,IAE/CgB,mBAAoB,IATNR,4EAaLS,GACVnB,KAAKoB,SAAS,CAAEF,mBAAoBC,EAAEE,OAAOC,6CAGnCH,GAGR,GADAA,EAAEI,iBACGvB,KAAKgB,MAAME,mBAAhB,CACA,IAAMM,EAAU,CAAEnB,YAAaL,KAAKgB,MAAME,mBAAoBhB,aAAa,GAC3EF,KAAKoB,SAAS,CAAEH,MAAK,GAAAQ,OAAAd,OAAAe,EAAA,EAAAf,CAAMX,KAAKgB,MAAMC,OAAjB,CAAwBO,IAAUN,mBAAoB,6CAIjES,GAEb,IAAMV,EAAQjB,KAAKgB,MAAMC,MAAMW,QACzBC,EAAOZ,EAAMU,GACnBE,EAAK3B,aAAc2B,EAAK3B,YACxBF,KAAKoB,SAAS,CAAEH,MAAOA,uCAIdU,GACT,IACIG,EADY9B,KAAKgB,MAAMC,MAAMW,QACPG,OAAO,SAACF,EAAMG,GACtC,OAAOA,IAAML,IAGf3B,KAAKoB,SAAS,CAAEH,MAAOa,qCAIhB,IAAAG,EAAAjC,KAEP,OAEAN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAETH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,OACdH,EAAAC,EAAAC,cAAA,mBAAUF,EAAAC,EAAAC,cAAA,QAAMC,UAAY,uBAA5B,UAGFH,EAAAC,EAAAC,cAAA,UACII,KAAKgB,MAAMC,MAAMiB,IAAK,SAACL,EAAMF,GAAP,OACxBjC,EAAAC,EAAAC,cAACuC,EAAD,CACEC,IAAQT,EACRtB,YAAgBwB,EAAKxB,YACrBH,YAAgB2B,EAAK3B,YACrBE,eAAmB,kBAAM6B,EAAK7B,eAAeuB,IAC7CpB,WAAe,kBAAM0B,EAAK1B,WAAWoB,SAKzCjC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,cACfH,EAAAC,EAAAC,cAAA,SACEC,UAAY,eACZwC,YAAc,eACdvC,KAAK,OACLwB,MAAQtB,KAAKgB,MAAME,mBACnBf,SAAW,SAACgB,GAAD,OAAOc,EAAKK,aAAanB,MAEtCzB,EAAAC,EAAAC,cAAA,OAAKU,QAAY,SAACa,GAAD,OAAOc,EAAKM,aAAapB,IAAKtB,UAAY,8BA7ErDW,aCQEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ecaddaf6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass ToDo extends Component {\r\n\r\n  render(){\r\n\r\n    return (\r\n\r\n      <li>\r\n\r\n        <label className = \"container\">\r\n\r\n         <input type = \"checkbox\" checked = { this.props.isCompleted } onChange = { this.props.toggleComplete }/>\r\n         <div className = \"checkmark\"></div>\r\n         <div className = \"item-font\"> { this.props.description } </div>\r\n         <div className = \"ion-ios7-minus\" onClick = { this.props.deleteTodo }></div>\r\n\r\n        </label>\r\n\r\n       </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDo;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport ToDo from './components/ToDo.js';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      todos: [\r\n        {description: 'Walk the cat', isCompleted: true},\r\n        {description: 'Throw the dishes away', isCompleted: false},\r\n        {description: 'Buy new dishes', isCompleted: false}\r\n      ],\r\n      newTodoDescription: ''\r\n    };\r\n  }\r\n\r\n  handleChange(e) {\r\n     this.setState({ newTodoDescription: e.target.value })\r\n   }\r\n\r\n  handleSubmit(e) {\r\n\r\n       e.preventDefault();\r\n       if (!this.state.newTodoDescription) { return }\r\n       const newTodo = { description: this.state.newTodoDescription, isCompleted: false };\r\n       this.setState({ todos: [...this.state.todos, newTodo], newTodoDescription: '' });\r\n\r\n     }\r\n\r\n  toggleComplete(index) {\r\n\r\n    const todos = this.state.todos.slice();\r\n    const todo = todos[index];\r\n    todo.isCompleted = todo.isCompleted ? false : true;\r\n    this.setState({ todos: todos });\r\n\r\n  }\r\n\r\n  deleteTodo(index) {\r\n    const arrCopy = this.state.todos.slice();\r\n    var filteredArr = arrCopy.filter((todo, i) => {\r\n      return i !== index;\r\n    });\r\n\r\n    this.setState({ todos: filteredArr });\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n    <div className=\"App\">\r\n\r\n          <div className= \"nav\">\r\n            <h1>Check <span className = \"ion-ios7-checkmark\"></span> Mate</h1>\r\n          </div>\r\n\r\n          <ul>\r\n            { this.state.todos.map( (todo, index) =>\r\n            <ToDo\r\n              key = { index }\r\n              description = { todo.description }\r\n              isCompleted = { todo.isCompleted }\r\n              toggleComplete = { () => this.toggleComplete(index) }\r\n              deleteTodo = { () => this.deleteTodo(index)}\r\n              />\r\n            )}\r\n          </ul>\r\n\r\n          <div className = \"bottom-bar\">\r\n            <input\r\n              className = \"add-item-bar\"\r\n              placeholder = \" add item...\"\r\n              type=\"text\"\r\n              value={ this.state.newTodoDescription }\r\n              onChange={ (e) => this.handleChange(e) }\r\n              />\r\n            <div onClick = { (e) => this.handleSubmit(e) } className = \"ion-plus-circled\"></div>\r\n          </div>\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}